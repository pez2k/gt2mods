# Patch out the PS to BHP conversion

# Car selection screen, 'Max Power' value

# // Original code
# if (carStats[1] == 0) { // If there is no peak power RPM value
#   FormatValue(param_1 + 0xf0, "%dhp", (carStats[0] * 1000) / 1014); // Format as just hp, multiplying the power by 1.014 for a rough PS to BHP conversion
# }
# else {
#   FormatValue(param_1 + 0xf0, "%dhp/%drpm", (carStats[0] * 1000) / 1014); // Else format as hp/rpm
# }

# // Patched code
# if (carStats[1] == 0) {
#   FormatValue(param_1 + 0xf0, "%dhp", carStats[0]); // Don't bother modifying the power value
# }
# else {
#   FormatValue(param_1 + 0xf0, "%dhp/%drpm", carStats[0]);
# }

# Patch
g 8B00        # Jump close to optimise pattern finding speed
p 50 20 03 3C 00 00 62 86 # At 0x8B3C PAL / 0x8B04 US 1.1
z 24          # Remove loading of PS value into v0, then calculation of PS * 1.014 using v1
m 08          # Retain the setup of a0 and a1
z 0C          # Remove remaining calculation code
m 04          # Preserve the function call itself
w 00 00 66 86 # lh a2,0x0(s3) // Load the PS value into a2 instead of the calculation result
m 08          # Move to else case
z 20          # Remove loading of PS value into v0, then calculation of PS * 1.014 using v1
m 08          # Retain the setup of a0 and a1
z 0C          # Remove remaining calculation code
m 04          # Preserve the function call itself
w 00 00 66 86 # lh a2,0x0(s3) // Load the PS value into a2 instead of the calculation result



# Car setup screen?

# // Original code
# FUN_80011bb0(param_1 + iVar13 * 0x100 + 0x7fc,(carData->Power * 1000) / 1014);

# // Patched code
# FUN_80011bb0(param_1 + iVar13 * 0x100 + 0x7fc,carData->Power);

# Patch
g 9500        # Jump close to optimise pattern finding speed
p 50 20 03 3C 00 00 82 86 # At 0x9550 PAL / 0x954C US 1.1
z 24          # Remove loading of PS value into v0, then calculation of PS * 1.014 using v1
m 10          # Retain the setup of a0
z 0C          # Remove the rest of the calculation
m 4           # Preserve the function call itself
w 00 00 85 86 # lh a1,0x0(s4) // Load the PS value into a1 instead of the calculation result



# Car setup screen graph axis, possibly?

# // Original code
# *(undefined2 *)(iVar6 + param_1 + 0xaa) = (short)(((int)(short)param_5->Power * 1000) / 1014);

# // Patched code
# *(word *)(iVar6 + param_1 + 0xaa) = param_5->Power;

# Patch
g 9680        # Jump close to optimise pattern finding speed
p 50 20 04 3C 0A 00 62 96 # At 0x96F0 PAL / 0x96EC US 1.1
z 04          # Remove the setup of a0 for the calculation
m 20
z 20          # Remove loading of PS value into v1, then calculation of PS * 1.014 using v0
m 0C          # Retain the setup of a0, a1, and a2
z 0C          # Remove the rest of the calculation
w 00 00 83 86 # lh v1,0x0(s4) // Load the PS value into v1 instead of the calculation result



# Car setup screen graph points, possibly?

# // Original code
# local_240[iVar4] = ((((int)(short)puVar5[0x16] * (int)(short)param_5->Power) / (int)(uint)*param_3) * 1000) / 1014;

# // Patched code
# local_240[iVar4] = ((int)(short)puVar5[0x16] * (int)(short)param_5->Power) / (int)(uint)*param_3;

# Patch
g 9700 # Jump close to optimise pattern finding speed
p FF FF 02 24 18 02 A2 AF
m 20   # At 0x9788 PAL / 0x97C8 US - can't pattern match the exact spots in this function as register use is different in US due to extra code for ft.lb conversion
z 08   # Remove the setup of the constant for the calculation
p 1A 00 03 02 12 18 00 00
m 08   # At 0x97D4 PAL / 0x981C US
z 18   # Remove the calculation which overwrites the PS value in v1
m 04   # Retain the setup of a0
z 10   # Remove the rest of the calculation



# Home Garage car list screen

# // Original code
# FUN_8008cf88(auStack104,"%dhp",((int)*(short *)(param_4 + 4) * 1000) / 1014);

# // Patched code
# FUN_8008cf88(auStack104,"%dhp",(int)*(short *)(param_4 + 4));

# Patch
g F300        # Jump close to optimise pattern finding speed
p 50 20 03 3C 04 00 02 85 # At 0xF37C PAL / 0xF3B4 US
z 24          # Remove loading of PS value into v0, then calculation of PS * 1.014 using v1
m 10          # Retain the setup of a0 and a1
z 0C          # Remove the rest of the calculation
m 04          # Preserve the function call itself
w 04 00 06 85 # lh a2,0x4(t0) // Load the PS value into a2 instead of the calculation result
